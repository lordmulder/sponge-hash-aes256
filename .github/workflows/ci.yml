name: Rust CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

jobs:
  # --------------------------------------------------------------------------
  # Pre-checks
  # --------------------------------------------------------------------------

  check:
    runs-on: ubuntu-latest
    container:
      image: rust:${{ matrix.rust }}
    strategy:
      matrix:
        include:
          - rust: 1.78.0-bookworm
            clippy_opts: "-Dwarnings -Aunknown_lints"
          - rust: 1.90.0-trixie
            clippy_opts: "-Dwarnings"
    steps:
      - run: rustup component add rustfmt clippy
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - run: |
          for subdir in lib app; do
            cargo check --manifest-path ${subdir}/Cargo.toml --verbose
            cargo fmt --manifest-path ${subdir}/Cargo.toml --all --check --verbose
            cargo clippy --manifest-path ${subdir}/Cargo.toml -- ${{ matrix.clippy_opts }}
          done

  # --------------------------------------------------------------------------
  # Tests
  # --------------------------------------------------------------------------

  test-linux:
    runs-on: ubuntu-latest
    container:
      image: rust:${{ matrix.rust }}
    needs: check
    strategy:
      matrix:
        rust: [1.78.0-bookworm, 1.90.0-trixie]
    env:
      TEST_EXTRA_OPTS: --verbose${{ github.event_name == 'release' && ' -- --include-ignored' || '' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - run: |
          for subdir in lib app; do
            cargo test --manifest-path ${subdir}/Cargo.toml ${TEST_EXTRA_OPTS}
            cargo test --manifest-path ${subdir}/Cargo.toml --release ${TEST_EXTRA_OPTS}
          done

  test-windows:
    runs-on: windows-latest
    needs: check
    strategy:
      matrix:
        rust: [1.78.0, 1.90.0]
    env:
      TEST_EXTRA_OPTS: --verbose${{ github.event_name == 'release' && ' -- --include-ignored' || '' }}
    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: x86_64-pc-windows-msvc,i686-pc-windows-msvc
          cache: false
          rustflags: -Dwarnings
      - run: git config --global core.symlinks false
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - run: |
          $PSNativeCommandUseErrorActionPreference = $true
          foreach ($subdir in @("lib", "app")) {
            foreach ($arch in @("x86_64", "i686")) {
              iex "cargo test --manifest-path $subdir/Cargo.toml --target $arch-pc-windows-msvc $env:TEST_EXTRA_OPTS"
              iex "cargo test --manifest-path $subdir/Cargo.toml --target $arch-pc-windows-msvc --release $env:TEST_EXTRA_OPTS"
            }
          }

  test-macos:
    runs-on: macos-latest
    needs: check
    strategy:
      matrix:
        rust: [1.78.0, 1.90.0]
    env:
      TEST_EXTRA_OPTS: --verbose${{ github.event_name == 'release' && ' -- --include-ignored' || '' }}
    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: x86_64-apple-darwin,aarch64-apple-darwin
          cache: false
          rustflags: -Dwarnings
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - run: |
          for subdir in lib app; do
            for arch in x86_64 aarch64; do
              cargo test --manifest-path ${subdir}/Cargo.toml --target $arch-apple-darwin ${TEST_EXTRA_OPTS}
              cargo test --manifest-path ${subdir}/Cargo.toml --target $arch-apple-darwin --release ${TEST_EXTRA_OPTS}
            done
          done

  # --------------------------------------------------------------------------
  # Build
  # --------------------------------------------------------------------------

  build-linux:
    runs-on: ubuntu-latest
    container:
      image: rust:1.90.0-trixie
    needs: [test-linux, test-windows, test-macos]
    steps:
      - run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y musl-tools crossbuild-essential-i386 crossbuild-essential-arm64 ruby-dev
          gem install --no-document fpm
          git config --global --add safe.directory '*'
      - run: |
          curl -sSf -o /tmp/libllvm20.deb http://archive.ubuntu.com/ubuntu/pool/main/l/llvm-toolchain-20/libllvm20_20.1.2-0ubuntu1~24.04.2_amd64.deb
          curl -sSf -o /tmp/llvm-20-linker-tools.deb http://archive.ubuntu.com/ubuntu/pool/universe/l/llvm-toolchain-20/llvm-20-linker-tools_20.1.2-0ubuntu1~24.04.2_amd64.deb
          export DEBIAN_FRONTEND=noninteractive
          apt-get install -y /tmp/libllvm20.deb /tmp/llvm-20-linker-tools.deb
          rm -f /tmp/libllvm20.deb /tmp/llvm-20-linker-tools.deb
      - run: |
          rustup target add x86_64-unknown-linux-musl
          rustup target add i586-unknown-linux-musl
          rustup target add i686-unknown-linux-musl
          rustup target add aarch64-unknown-linux-musl
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - working-directory: ${{ github.workspace }}/.build/linux
        run: make
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-linux
          path: ${{ github.workspace }}/.build/linux/target/*.*
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ github.workspace }}/.build/linux/target/dist/doc

  build-windows:
    runs-on: windows-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - uses: repolevedavaj/install-nsis@v1.1.0
        with:
          nsis-version: '3.11'
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: x86_64-pc-windows-msvc,i686-pc-windows-msvc,aarch64-pc-windows-msvc
          cache: false
          rustflags: "-Dwarnings -Ctarget-feature=+crt-static"
      - run: |
          git config --global core.symlinks false
          git config --global --add safe.directory '*'
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - working-directory: ${{ github.workspace }}/.build/windows
        run: cmd.exe /c make.cmd
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-windows
          path: ${{ github.workspace }}/.build/windows/target/*.*

  build-macos:
    runs-on: macos-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - run: git config --global --add safe.directory '*'
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: x86_64-apple-darwin,aarch64-apple-darwin
          cache: false
          rustflags: "-Dwarnings -Ctarget-feature=+crt-static"
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - working-directory: ${{ github.workspace }}/.build/macos
        run: make
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-macos
          path: ${{ github.workspace }}/.build/macos/target/*.dmg

  build-freebsd:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/freebsd-vm@v1
        with:
          release: 14.3
          usesh: true
          prepare: |
            pkg install -y git curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.90.0
            . "$HOME/.cargo/env"
            rustup target add x86_64-unknown-freebsd i686-unknown-freebsd
            git config --global --add safe.directory '*'
          run: |
            . "$HOME/.cargo/env"
            cd .build/unix && ./build-freebsd.sh
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-freebsd
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-netbsd:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/netbsd-vm@v1
        with:
          release: 10.1
          usesh: true
          prepare: |
            /usr/sbin/pkg_add git curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.90.0
            git config --global --add safe.directory '*'
          run: |
            . "$HOME/.cargo/env"
            cd .build/unix && ./build-netbsd.sh
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-netbsd
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-openbsd:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/openbsd-vm@v1
        with:
          release: 7.8
          usesh: true
          prepare: |
            pkg_add git rust
            git config --global --add safe.directory '*'
          run: |
            cd .build/unix && ./build-openbsd.sh
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-openbsd
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-dragonfly:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/dragonflybsd-vm@v1
        with:
          release: 6.4.2
          usesh: true
          prepare: |
            pkg install -y rust
            git config --global --add safe.directory '*'
          run: |
            cd .build/unix && ./build-dragonfly.sh
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-dragonfly
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-solaris:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/solaris-vm@v1
        with:
          release: 11.4
          usesh: true
          prepare: |
            pkg install developer/gcc developer/versioning/git
            source <(curl -s https://raw.githubusercontent.com/psumbera/solaris-rust/refs/heads/main/sh.rust-web-install)
            git config --global --add safe.directory '*'
          run: |
            export PATH=/root/.rust_solaris/bin:$PATH
            cd .build/unix && ./build-solaris.sh
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-solaris
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-illumos:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows, test-macos]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/omnios-vm@v1
        with:
          release: r151054
          usesh: true
          prepare: |
            pkg install developer/build-essential developer/versioning/git
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.90.0
            git config --global --add safe.directory '*'
          run: |
            . "$HOME/.cargo/env"
            cd .build/unix && ./build-solaris.sh
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-illumos
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # Deploy pages
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  pages:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, build-freebsd, build-netbsd, build-openbsd, build-dragonfly, build-solaris, build-illumos]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  # --------------------------------------------------------------------------
  # Release
  # --------------------------------------------------------------------------

  release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs: [build-linux, build-windows, build-macos, build-freebsd, build-netbsd, build-openbsd, build-dragonfly, build-solaris, build-illumos]
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: sponge256sum-*
          path: artifacts
          merge-multiple: true
      - uses: Roang-zero1/github-upload-release-artifacts-action@v2
        with:
          args: artifacts/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
