name: Rust CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

jobs:
  # --------------------------------------------------------------------------
  # Pre-checks
  # --------------------------------------------------------------------------

  check:
    runs-on: ubuntu-latest
    container:
      image: rust:${{ matrix.rust }}
    strategy:
      matrix:
        rust: [1.90.0-trixie, 1.85.1-bookworm]
        project: [lib, app]
    steps:
      - run: rustup component add rustfmt clippy
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - working-directory: ${{ github.workspace }}/${{ matrix.project }}
        run: cargo check --verbose
      - working-directory: ${{ github.workspace }}/${{ matrix.project }}
        run: cargo fmt --all --check --verbose
      - working-directory: ${{ github.workspace }}/${{ matrix.project }}
        run: cargo clippy -- -D warnings${{ matrix.rust == '1.85.1-bookworm' && ' -A unknown_lints' || '' }}

  # --------------------------------------------------------------------------
  # Tests
  # --------------------------------------------------------------------------

  test-linux:
    runs-on: ubuntu-latest
    container:
      image: rust:${{ matrix.rust }}
    needs: check
    strategy:
      matrix:
        rust: [1.90.0-trixie, 1.85.1-bookworm]
        project: [lib, app]
    env:
      TEST_OPTIONS: --verbose${{ matrix.options }}${{ github.event_name == 'release' && ' -- --include-ignored' || '' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - working-directory: ${{ github.workspace }}/${{ matrix.project }}
        run: |
          set -xe
          cargo test ${TEST_OPTIONS}
          cargo test --release ${TEST_OPTIONS}

  test-windows:
    runs-on: windows-latest
    needs: check
    strategy:
      matrix:
        rust: [1.90.0, 1.85.1]
        project: [lib, app]
        arch:  [x86_64, i686]
    env:
      TEST_OPTIONS: --target ${{ matrix.arch }}-pc-windows-msvc --verbose${{ matrix.options }}${{ github.event_name == 'release' && ' -- --include-ignored' || '' }}
    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          rustflags: -Dwarnings
          target: ${{ matrix.arch }}-pc-windows-msvc
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - working-directory: ${{ github.workspace }}/${{ matrix.project }}
        run: |
          $ErrorActionPreference = "Stop"
          $PSNativeCommandUseErrorActionPreference = $true
          iex "cargo test $env:TEST_OPTIONS"
          iex "cargo test --release $env:TEST_OPTIONS"

  # --------------------------------------------------------------------------
  # Build
  # --------------------------------------------------------------------------

  build-linux:
    runs-on: ubuntu-latest
    container:
      image: rust:1.90.0-trixie
    needs: [test-linux, test-windows]
    steps:
      - run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y musl-tools crossbuild-essential-i386 crossbuild-essential-arm64
      - run: |
          rustup target add x86_64-unknown-linux-musl
          rustup target add i586-unknown-linux-musl
          rustup target add i686-unknown-linux-musl
          rustup target add aarch64-unknown-linux-musl
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - working-directory: ${{ github.workspace }}/.build/linux
        run: make
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-linux
          path: ${{ github.workspace }}/.build/linux/target/*.tar.xz

  build-windows:
    runs-on: windows-latest
    needs: [test-linux, test-windows]
    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          rustflags: "-Dwarnings -Ctarget-feature=+crt-static"
          target: x86_64-pc-windows-msvc,i686-pc-windows-msvc,aarch64-pc-windows-msvc
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - run: git config --global --add safe.directory $env:GITHUB_WORKSPACE
      - working-directory: ${{ github.workspace }}/.build/windows
        run: cmd.exe /c make.cmd
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-windows
          path: ${{ github.workspace }}/.build/windows/target/*.*

  build-macos:
    runs-on: macos-latest
    needs: [test-linux, test-windows]
    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          rustflags: -Dwarnings
          target: x86_64-apple-darwin,aarch64-apple-darwin
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE
      - working-directory: ${{ github.workspace }}/.build/macos
        run: make
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-macos
          path: ${{ github.workspace }}/.build/macos/target/*.dmg

  build-freebsd:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/freebsd-vm@v1
        with:
          release: 14.3
          usesh: true
          prepare: |
            pkg install -y git curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.90.0
            . "$HOME/.cargo/env"
            rustup target add x86_64-unknown-freebsd i686-unknown-freebsd
            git config --global --add safe.directory '*'
          run: |
            . "$HOME/.cargo/env"
            cd .build/unix
            make MY_OS=freebsd MY_ARCH="x86_64 i686" MY_RUSTFLAGS="-Dwarnings -Ctarget-feature=+crt-static"
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-freebsd
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-netbsd:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/netbsd-vm@v1
        with:
          release: 10.1
          usesh: true
          prepare: |
            /usr/sbin/pkg_add git curl
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.90.0
            git config --global --add safe.directory '*'
          run: |
            . "$HOME/.cargo/env"
            cd .build/unix
            make MY_OS=netbsd MY_ARCH=x86_64 MY_RUSTFLAGS="-Dwarnings -Ctarget-feature=+crt-static"
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-netbsd
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-openbsd:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/openbsd-vm@v1
        with:
          release: 7.7
          usesh: true
          prepare: |
            pkg_add git rust
            git config --global --add safe.directory '*'
          run: |
            cd .build/unix
            make MY_OS=openbsd MY_ARCH=x86_64 MY_RUSTFLAGS="-Dwarnings -Ctarget-feature=+crt-static"
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-openbsd
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-solaris:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/solaris-vm@v1
        with:
          release: 11.4
          usesh: true
          prepare: |
            pkg install developer/gcc developer/versioning/git
            source <(curl -s https://raw.githubusercontent.com/psumbera/solaris-rust/refs/heads/main/sh.rust-web-install)
            git config --global --add safe.directory '*'
          run: |
            export PATH=/root/.rust_solaris/bin:$PATH
            cd .build/unix
            make MY_OS=solaris MY_VENDOR=pc MY_ARCH=x86_64 MY_RUSTFLAGS="-Dwarnings -Ctarget-feature=+crt-static"
      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-solaris
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  build-illumos:
    runs-on: ubuntu-latest
    needs: [test-linux, test-windows]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name && format('refs/tags/{0}', github.event.release.tag_name) || github.sha }}
      - uses: vmactions/omnios-vm@v1
        with:
          release: r151054
          usesh: true
          prepare: |
            pkg install developer/build-essential developer/versioning/git
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.90.0
            git config --global --add safe.directory '*'
          run: |
            . "$HOME/.cargo/env"
            cd .build/unix
            make MY_OS=illumos MY_ARCH=x86_64 MY_RUSTFLAGS="-Dwarnings -Ctarget-feature=+crt-static"

      - uses: actions/upload-artifact@v4
        with:
          name: sponge256sum-illumos
          path: ${{ github.workspace }}/.build/unix/target/*.tar.xz

  # --------------------------------------------------------------------------
  # Release
  # --------------------------------------------------------------------------

  release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs: [build-linux, build-windows, build-macos, build-freebsd, build-netbsd, build-openbsd, build-solaris, build-illumos]
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: sponge256sum-*
          path: artifacts
          merge-multiple: true
      - uses: Roang-zero1/github-upload-release-artifacts-action@v2
        with:
          args: artifacts/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
